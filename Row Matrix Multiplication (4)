<!DOCTYPE html>
<html>
<head>
  <!-- The following adds MathJax to render LaTeX notation -->
  <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
  <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3.0.1/es5/tex-mml-chtml.js"></script>
</head>

<style>
#blank {
  position: relative;
}

#outer {
  position: absolute;
  height: 400px;
  width: 400px;
  left: 0px;
  top: 90px;
  background-color: white;
  text-align: center;
  border: 9px solid #d3d3d3;}

 
#bluetip {
  position: absolute;
  height: 20px;
  width: 20px;
  left: 90px;
  top: 90px;
  background-color: grey;}
  
#greentip {
  position: absolute;
  height: 20px;
  width: 20px;
  left: 290px;
  top: 90px;
  background-color: grey;}

  
#matrix {
  position: absolute;
  height: 60px;
  width: 350px;
  left: 10px;
  top: 10px;
  background-color: grey;
  text-align: center;
  border: 9px solid #d3d3d3;}
  
#M11 {
  position: absolute;
  height: 20px;
  width: 60px;
  left: 10px;
  top: 10px;
  background-color: blue;
  text-align: center;}
  
#M21 {
  position: absolute;
  height: 20px;
  width: 60px;
  left: 10px;
  top: 30px;
  background-color: red;
  text-align: center;}
  
#M12 {
  position: absolute;
  height: 20px;
  width: 60px;
  left: 70px;
  top: 10px;
  background-color: blue;
  text-align: center;}
  
#M22 {
  position: absolute;
  height: 20px;
  width: 60px;
  left: 70px;
  top: 30px;
  background-color: red;
  text-align: center;}


#times {
  position: absolute;
  height: 20px;
  width: 20px;
  left: 140px;
  top: 20px;
  background-color: white;
  text-align: center;}

#equals {
  position: absolute;
  height: 20px;
  width: 20px;
  left: 245px;
  top: 20px;
  background-color: white;
  text-align: center;}

  
#V1 {
  position: absolute;
  height: 20px;
  width: 60px;
  left: 170px;
  top: 10px;
  background-color: purple;
  text-align: center;}
  
#V2 {
  position: absolute;
  height: 20px;
  width: 60px;
  left: 170px;
  top: 30px;
  background-color: purple;
  text-align: center;}
  
#W1 {
  position: absolute;
  height: 20px;
  width: 65px;
  left: 280px;
  top: 10px;
  background-color: blue;
  text-align: center;}
  
#W2 {
  position: absolute;
  height: 20px;
  width: 65px;
  left: 280px;
  top: 30px;
  background-color: red;
  text-align: center;}
 
#but {
  position: absolute;
  height: 30px;
  width: 30px;
  left: 290px;
  top:30px;
  background-color: black;
  text-align: center;}

#but2 {
  position: absolute;
  height: 30px;
  width: 30px;
  left: 235px;
  top:10px;
  background-color: black;
  text-align: center;}

#sub {
  position: absolute;
  height: 30px;
  width: 80px;
  left: 380px;
  top: 50px;
  background-color: white;
  text-align: center;}

#try {
  position: absolute;
  height: 30px;
  width: 80px;
  left: 380px;
  top: 10px;
  background-color: white;
  text-align: center;}
 </style>
 
<body>
<div>
<p>
  Let us explore another perspective of matrix multiplication in the context of the rows of matrix.
  Here, we view the matrix equation \(Ax = b\) in the following framework:
  <ol type='a'>
    <li>The column vector \(x\) has \(m\) unknowns \(x_1, x_2, \ldots, x_m\);</li>
    <li>Each of the \(n\) rows of the matrix \(A\) provide coefficients of the respective unknowns.
    They represent an expression in terms of these unknowns;</li>
    <li>Each entry of the column vector \(b\) provides a value for the respective expressions mentioned in part (b).</li>
  </ol>
  In other words, we can see the equation \(Ax = b\) as a system of linear equations that an unknown vector \(x\) is supposed to satisfy.
  We shall explore this using a system of two linear equations in two unknowns, which are straight lines on a plane, in general.
</p>

<p>
  In the following questions, only the entries of matrix \(A\) and vector \(b\) can be changed.
  The entries in vector \(x\) changes in response to these entries. 
  In the case where no such \(x\) exists, there are no values displayed in \(x\).

  As you change the values in \(A\) and \(b\), ponder what these changes mean geometrically for the respective straight lines.
</p>

  <div id="question">


  Ready to begin?  Click "Start" to view your first question.


  </div>
</div>

<div id="blank">
  <div id="matrix">

    <div id="M11">
    <input type="number" id="m11"   style="width: 3em" value="-1" step=0.1 onChange="draw()">
    </div>

    <div id="M12">
    <input type="number" id="m12"   style="width: 3em" value="1" step=0.1 onChange="draw()">
    </div>

    <div id="M21">
    <input type="number" id="m21"   style="width: 3em" value="1" step=0.1 onChange="draw()">
    </div>

    <div id="M22">
    <input type="number" id="m22"   style="width: 3em" value="1" step=0.1 onChange="draw()">
    </div>

    <div id="times">
    <b>
    &times
    </b>
    </div>

    <div id="V1">
    <input type="text" id="v1"   style="width: 3em" value="x" step=0.1 >
    </div>

    <div id="V2">
    <input type="text" id="v2"   style="width: 3em" value="y"  >
    </div>

    <div id="equals">
    <b>
    =
    </b>
    </div>

    <div id="W1">
    <input type="number" id="w1"   style="width: 3.5em" value="0" step=0.1 onChange="draw()">
    </div>

    <div id="W2">
    <input type="number" id="w2"   style="width: 3.5em" value="1" step=0.1 onChange="draw()">
    </div>
  </div>

  <div id="sub">
  <button  onclick="submit()">Start</button>
  </div>

  <div id="try">
  </div>

  <div id="outer">
  <canvas id="myCanvas" width="400" height="400"
  style="border:1px solid #c3c3c3;">
  </canvas>
  </div>
</div>


<script>
draw()
function draw(){

  a11=document.getElementById("m11").value
  a21=document.getElementById("m21").value

  a12=document.getElementById("m12").value
  a22=document.getElementById("m22").value

  var c1=document.getElementById("w1").value
  var c2=document.getElementById("w2").value


  y0=(1*c1+2*a11)/(1*a12+0.001)
  y1=(1*c1-2*a11)/(1*a12+0.001)

  y2=(1*c2+2*a21)/(1*a22+0.001)
  y3=(1*c2-2*a21)/(1*a22+0.001)

  Y0=200-100*y0
  Y1=200-100*y1
  Y2=200-100*y2
  Y3=200-100*y3

  var canvas = document.getElementById("myCanvas");
  var ctx = canvas.getContext("2d");
  ctx.clearRect(0, 0, canvas.width, canvas.height)
  ctx.beginPath();
  ctx.strokeStyle="black"
  ctx.lineWidth=1
  ctx.moveTo(0, 200);
  ctx.lineTo(400, 200);
  ctx.stroke();
  ctx.beginPath();
  ctx.strokeStyle="black"
  ctx.lineWidth=1
  ctx.moveTo(200, 0);
  ctx.lineTo(200, 400);
  ctx.stroke();


  ctx.beginPath();
  ctx.strokeStyle="blue"
  ctx.lineWidth=2
  ctx.moveTo(0, Y0);
  ctx.lineTo(400, Y1);
  ctx.stroke();


  ctx.beginPath();
  ctx.strokeStyle="red"
  ctx.lineWidth=2
  ctx.moveTo(0, Y2);
  ctx.lineTo(400, Y3);
  ctx.stroke();


  if (a11*a22!=a12*a21){
    var x=(a22*c1-a12*c2)/(a11*a22-a12*a21)
    var y=(a11*c2-a21*c1)/(a11*a22-a12*a21)
    document.getElementById("v1").value=x.toFixed(2)
    document.getElementById("v2").value=y.toFixed(2)}

  if (a11*a22==a12*a21){
    document.getElementById("v1").value=''
    document.getElementById("v2").value=''}
}
</script>


<script>
var initialized=0
var page=0
var quests=[
"Warmup 1. Determine two lines, one with zero slope and the other with positive slope, on the diagram below.",
"Warmup 2. Determine two lines, both with negative slopes, on the diagram below.",
"Warmup 3. Determine two lines, one with slope 1 and the other with slope -1, such that both have positive y-intercepts.",
"Warmup 4. Determine two lines, one with slope 1 and the other with slope -1, such that both have negative x-intercepts.",
"1. Find two lines, one with positive slope and the other with negative slope, that intersect somewhere strictly in the first quadrant.",
"2. Superb!! Determine two lines, with slopes -0.5 and -1 respectively that intersect somewhere within the fourth quadrant.",
"3. Wonderful! Next, find two lines, both with negative slope, that intersect somewhere on the x-axis.",
"4. Excellent! Now find two lines, both with positive slope, that intersect somewhere on the y-axis.",
"5. Terrific! Find two lines, one with positive slope and the other with negative slope, that intersect somewhere near (-1, 1).",
"6. Great!! Let's now find two lines, with slopes 1 and 2 respectively that intersect somewhere near the point (-2, -1).",
"7. Awesome, let's try a different type of question. Set the first row of A to have only entries with negative signs, and the second row to have only entries with positive signs. Find a pair of values for b so that the two lines intersect at exactly one point.",
"8. Nice! Set the first row of A to have only entries with negative signs, and the second row to have only entries with positive signs. Find a pair of values for b so that the two lines intersect at more than one point.",
"9. Way to go! Set the first row of A to have only entries with negative signs, and the second row to have only entries with positive signs. Find a pair of values for b so that the two lines never intersect.",
"Good job!!!"]

function submit(){
  if (initialized==0){
  document.getElementById("sub").getElementsByTagName("button")[0].innerText="Submit"
  document.getElementById("question").innerText=quests[page]
  }

  if (initialized==1){
    M11=document.getElementById("m11").value
    M21=document.getElementById("m21").value
    M12=document.getElementById("m12").value
    M22=document.getElementById("m22").value

    V1=document.getElementById("v1").value
    V2=document.getElementById("v2").value
    
    W1=document.getElementById("w1").value
    W2=document.getElementById("w2").value
    
    var feed=document.getElementById("try").innerText
    if (feed==""){
      document.getElementById("try").innerText="Try Again"
    }
    if (feed=="Not Quite"){
      document.getElementById("try").innerText="Try Again"
    }
    if (feed=="Try Again"){
      document.getElementById("try").innerText="Not Quite"
    }

    if (grade(page,M11,M21,M12,M22,V1,V2,W1,W2)=="true"){
      document.getElementById("try").innerText=""
      page+=1
      document.getElementById("question").innerText=quests[page]
    }
  }
  initialized=1
}

function grade(page,m11,m21,m12,m22,w1,w2){
  correct="false"
  var rowSign1=m11*m12
  var rowSign2=m21*m22
  var x=(m22*w1-m12*w2)/(m11*m22-m12*m21)
  var y=(m11*w2-m21*w1)/(m11*m22-m12*m21)

  switch(page){
    case 0:
      var cond1 = -m11/m12==0 && rowSign2<0
      var cond2 = rowSign1<0 && -m21/m22==0
      if (cond1 || cond2){
        correct="true"
      }
      break
    
    case 1:
      if (rowSign1>0 && rowSign2>0){
        correct="true"
      }
      break
    
    case 2:
      var cond1=(-m11/m12==1 && -m21/m22==-1)
      var cond2=(-m11/m12==-1 && -m21/m22==1)
      if ((cond1 || cond2) && w1/m12>0 && w2/m22>0){
        correct="true"
      }
      break

    case 3:
      var cond1=(-m11/m12==1 && -m21/m22==-1)
      var cond2=(-m11/m12==-1 && -m21/m22==1)
      if ((cond1 || cond2) && w1/m11<0 && w2/m21<0){
        correct="true"
      }
      break

    case 4:
      var cond1=(rowSign1<0 && rowSign2>0)
      var cond2=(rowSign1>0 && rowSign2<0)
      if ((cond1 || cond2) && x>0 && y>0){
        correct="true"
      }
      break

    case 5:
      var cond1=(-m11/m12==-0.5 && -m21/m22==-1)
      var cond2=(-m11/m12==-1 && -m21/m22==-0.5)
      if ((cond1 || cond2) && x>=0 && y<=0){
        correct="true"
      }
      break

    case 6:
      if (rowSign1>0 && rowSign2>0 && y==0){
        correct="true"
      }
      break

    case 7:
      if (rowSign1<0 && rowSign2<0 && x==0){
        correct="true"
      }
      break

    case 8:
      var cond1=(rowSign1<0 && rowSign2>0)
      var cond2=(rowSign1>0 && rowSign2<0)
      if ((cond1 || cond2) && (x+1)**2+(y-1)**2<=1){
        correct="true"
      }
      break

    case 9:
      var cond1=(-m11/m12==1 && -m21/m22==2)
      var cond2=(-m11/m12==2 && -m21/m22==1)
      if ((cond1 || cond2) && (x+2)**2<=0.5 && (y+1)**2<=0.5){
        correct="true"
      }
      break

    case 10:
      if (m11<0 && m12<0 && m21>0 && m22>0 && m11*m22!=m12*m21){
        correct="true"
      }
      break

    case 11:
      if (m11<0 && m12<0 && m21>0 && m22>0 && m11*m22==m12*m21 && m11*w2==w1*m21){
        correct="true"
      }
      break

    case 12:
      if (m11<0 && m12<0 && m21>0 && m22>0 && m11*m22==m12*m21 && m11*w2!=w1*m21){
        correct="true"
      }
      break
  }
  return(correct)
}
</script>
</body>
</html>